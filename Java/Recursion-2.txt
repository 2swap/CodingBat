public boolean groupSum(int start, int[] nums, int target) {  if(start==nums.length)return target==0;  return groupSum(start+1,nums,target-nums[start])|groupSum(start+1,nums,target);}public boolean groupSum6(int start, int[] nums, int target) {  if(start==0){    for(int i=0;i<nums.length;i++){      int o=nums[i];      if(o==6)target-=6;      nums[i]=o==6?0:o;    }  }  if(start==nums.length)return target==0;  return groupSum6(start+1,nums,target-nums[start])|groupSum6(start+1,nums,target);}public boolean groupNoAdj(int start, int[] nums, int target) {  if(start>=nums.length)return target==0;  return groupNoAdj(start+2,nums,target-nums[start])|groupNoAdj(start+1,nums,target);}public boolean groupSum5(int start, int[] nums, int target) {  if(start==0){    for(int i=0;i<nums.length;i++){      int o=nums[i];      if(o%5==0){if(i+1<nums.length&&nums[i+1]==1)nums[i+1]=0;target-=o;}      nums[i]=o%5==0?0:o;    }  }  if(start>=nums.length)return target==0;  return groupSum5(start+1,nums,target-nums[start])|groupSum5(start+1,nums,target);}public boolean groupSumClump(int start, int[] nums, int target) {  if(start==0){    ArrayList<Integer> list=new ArrayList<>();    int s=0;    for(int i=0;i<nums.length;i++){      s+=nums[i];      if(i>nums.length-2||nums[i+1]!=nums[i]){        list.add(s);        s=0;      }    }    nums=new int[list.size()];    for(int i=0;i<list.size();i++)nums[i]=list.get(i);  }  return start==nums.length?target==0:groupSumClump(start+1,nums,target-nums[start])||groupSumClump(start+1,nums,target);}public boolean splitArray(int[] nums) {  return splitArrayHelper(0,nums,0);}public boolean splitArrayHelper(int start, int[] nums, int sum){  return start==nums.length?sum==0:splitArrayHelper(start+1,nums,sum+nums[start])||splitArrayHelper(start+1,nums,sum-nums[start]);}public boolean splitOdd10(int[] nums) {  return helper(0,nums,0,0);}public boolean helper(int start, int[] nums, int g1, int g2){  return start==nums.length?g1%10==0&&g2%2!=0:helper(start+1,nums,g1+nums[start],g2)||helper(start+1,nums,g1,nums[start]+g2);}public boolean split53(int[] nums) {  return helper(0,nums,0,0);}public boolean helper(int start, int[] nums, int g1, int g2){  return start==nums.length?g1==g2:((nums[start]%3!=0||nums[start]%5==0)&&helper(start+1,nums,g1+nums[start],g2))||(nums[start]%5!=0&&helper(start+1,nums,g1,nums[start]+g2));}