public int maxSpan(int[] nums) {  int max = 0;  for(int i = 0; i < nums.length; i++)    for(int j = i; j < nums.length; j++)      if(nums[i]==nums[j])        if(j-i+1>max)          max=j-i+1;  return max;}public int[] fix34(int[] nums) {  for(int i = 0; i < nums.length; i++)    if(i != 0 && nums[i-1] == 3 && nums[i] != 4)      for(int j = 0; j < nums.length; j++)        if(nums[j] == 4 && j != 0 && nums[j-1]!=3){          int temp = nums[j];          nums[j] = nums[i];          nums[i] = temp;                  }  return nums;  }public int[] fix45(int[] nums) {  for(int i = 0; i < nums.length; i++)    if(i != 0 && nums[i-1] == 4 && nums[i] != 5)      for(int j = 0; j < nums.length; j++)        if(nums[j] == 5){          if(j != 0 && nums[j-1]==4)            continue;          int temp = nums[j];          nums[j] = nums[i];          nums[i] = temp;        }  return nums;}public boolean canBalance(int[] nums) {  for(int i = 0; i < nums.length; i++){    int l=0,r=0;    for(int j = 0; j < i;j++)    l+=nums[j];    for(int j = i; j < nums.length;j++)    r+=nums[j];    if(l==r)return true;}return false;}public boolean linearIn(int[] outer, int[] inner) {  int indexOuter = 0;  for(int i = 0; i < inner.length; i++){    while(outer[indexOuter] < inner[i]){      indexOuter++;      if(indexOuter>=outer.length)        return false;    }    if(outer[indexOuter]!=inner[i])      return false;  }  return true;}public int[] squareUp(int n) {  int[] out = new int[n*n];  for(int block = 0; block < n; block++)  for(int i = 0; i < n; i++)  if(i<n-block-1)  out[block*n+i]=0;  else  out[block*n+i]=n-i;  return out;}public int[] seriesUp(int n) {  int[] out = new int[n*(n + 1)/2];  int index = 0;  for(int i = 1; i <= n; i++){    for(int j = 1; j <= i; j++){      out[index] = j;    index++;}  }  return out;}public int maxMirror(int[] nums) {  int o=0,l=nums.length;  for(int i=-l+1,c=0;i<l;i++,c=0)    for(int j=0;j<l;j++)      if(i+j>=0&&i+j<l&&(c=nums[l-1-j]==nums[i+j]?c+1:0)>o)        o=c;  return o;}public int countClumps(int[] nums) {  int[] o={0,0};  for(int i=1;i<nums.length;i++){    boolean s=nums[i]==nums[i-1];    o=new int[]{o[0]+(s&o[1]==0?1:0),s?1:0};  }  return o[0];}