public boolean scoresIncreasing(int[] scores) {  for(int i=scores.length-1;i>0;)    if(scores[i--]<scores[i])      return false;  return true;}public boolean scores100(int[] scores) {  for(int i=scores.length-1;i>0;)    if(scores[i]+scores[--i]==200)      return true;  return false;}public boolean scoresClump(int[] scores) {  for(int i=2;i<scores.length;)    if(scores[i]<scores[i++-2]+3)      return true;  return false;}public int scoresAverage(int[] scores) {  int i,s,d,l=scores.length/2,j,k;  for(i=s=d=0;i<l*2;i++){    s+=j=i<l?k=scores[i]:0;    d+=scores[i]-j;  }  return (s>d?s:d)/l;}public int wordsCount(String[] words, int len) {  int i,c;  for(i=c=0;i<words.length;c+=(words[i++].length()==len)?1:0);  return c;}public String[] wordsFront(String[] words, int n) {  String[]out=new String[n];  for(int i=0;i<n;out[i]=words[i++]);  return out;}public List wordsWithoutList(String[] words, int len) {  ArrayList<String> l=new ArrayList<>();  String a;  for(int i=0;i<words.length;)    if((a=words[i++]).length()!=len)l.add(a);  return l;}public boolean hasOne(int n) {  return (""+n).contains("1");}public boolean dividesSelf(int n) {  int i=n;  while(i>0){    if(i%10==0||n%(i%10)!=0)      return false;    i/=10;  }  return true;}public int[] copyEvens(int[] nums, int count) {  int[] n=new int[count];  for(int i=0,j=0;j<count;i++)    if(nums[i]%2==0){      n[j]=nums[i];      j++;    }  return n;}public int[] copyEndy(int[] nums, int count) {  int[]o=new int[count];  for(int i=0,j=0;j<count;i++)    if(isEndy(nums[i])){      o[j++]=nums[i];    }  return o;}public boolean isEndy(int n){  return n%90<11;}public int matchUp(String[] a, String[] b) {  int count=0;  for(int i=0;i<a.length;i++)    if(a[i].length()!=0&&b[i].length()!=0&&b[i].startsWith(a[i].charAt(0)+""))      count++;  return count;}public int scoreUp(String[] key, String[] answers) {  int score=0;  for(int i=0;i<key.length;i++)    score+=key[i].equals(answers[i])?4:answers[i].equals("?")?0:-1;  return score;}public String[] wordsWithout(String[] words, String target) {  int a=0;  for(String s:words)    if(!s.equals(target))      a++;  String[]r=new String[a];  a=0;  for(String s:words)    if(!s.equals(target))      r[a++]=s;  return r;}public int scoresSpecial(int[] a, int[] b) {  return helper(a)+helper(b);}public int helper(int[]a){  int r=0;  for(int i:a)    r=i>r&&i%10==0?i:r;  return r;}public int sumHeights(int[] heights, int start, int end) {  int o=0;  for(start=start;start<end;start++)    o+=Math.abs(heights[start+1]-heights[start]);  return o;}public int sumHeights2(int[] heights, int start, int end) {  int o=0;  for(start=start;start<end;start++){    int a=heights[start+1]-heights[start];    o+=a>0?2*a:-a;}  return o;}public int bigHeights(int[] heights, int start, int end) {  int o=0;  for(start=start;start<end;start++)    o+=Math.abs(heights[start+1]-heights[start])>4?1:0;  return o;}public int userCompare(String aName, int aId, String bName, int bId) {  int n=aName.compareTo(bName);  return (int)Math.signum(n==0?aId-bId:n);}public String[] mergeTwo(String[] a, String[] b, int n) {  String[]o=new String[n];  for(int i=0,c=0,d=0;i<n;i++){    o[i]=a[c].compareTo(b[d])<0?a[c++]:b[d++];    if(a[c].equals(o[i]))c++;  }  return o;}public int commonTwo(String[] a, String[] b) {  int count=0;  for(int c=0,d=0;c<a.length&&d<b.length;){    while(c<a.length-1&&a[c].equals(a[c+1]))c++;//doubly nested, still O(n).    while(d<b.length-1&&b[d].equals(b[d+1]))d++;    int compare=a[c].compareTo(b[d]);    if(compare==0)count++;    if(compare>=0)d++;    if(compare<=0)c++;  }  return count;}