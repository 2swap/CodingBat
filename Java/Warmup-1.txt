public boolean sleepIn(boolean weekday, boolean vacation) {  return (!weekday||vacation);}public boolean monkeyTrouble(boolean aSmile, boolean bSmile) {  return !(aSmile ^ bSmile);}public int sumDouble(int a, int b) {  return a==b?2*(a+b):(a+b);}public int diff21(int n) {  int n2 = 21-n;  return n>21?-2*n2:n2;}public boolean parrotTrouble(boolean talking, int hour) {  return talking && (hour < 7 || hour > 20);}public boolean makes10(int a, int b) {  return a==10||b==10||b+a==10;}public boolean nearHundred(int n) {  return (Math.abs(100-n)<11||Math.abs(200-n)<11);}public boolean posNeg(int a, int b, boolean negative) {  if(negative){return a<0&&b<0;}  else{return Math.signum(a)!=Math.signum(b);}}public String notString(String str) {  return str.startsWith("not")?str:("not "+str);}public String missingChar(String str, int n) {  return str.substring(0,n)+str.substring(n+1);}public String frontBack(String str) {  if(str.length()<2)return str;  String str2 = str.charAt(str.length()-1) + "";  for(int i = 1; i < str.length() - 1; i++)str2+=str.charAt(i);str2+=str.charAt(0);  return str2;}public String front3(String str) {  String one = str.length() < 3? str:str.substring(0,3);  return one+one+one;}public String backAround(String str) {  return str.charAt(str.length()-1) + str + str.charAt(str.length()-1);}public boolean or35(int n) {  return (n%3==0 || n%5 == 0);}public String front22(String str) {  String one = str.length() < 2? str : str.substring(0,2);  return one + str + one;}public boolean startHi(String str) {  return str.startsWith("hi");}public boolean icyHot(int temp1, int temp2) {  return temp1*temp2 < 0 && (temp1 > 100 || temp2 > 100);}public boolean in1020(int a, int b) {  return (a <= 20 && a >= 10) || (b <= 20 && b >= 10);}public boolean hasTeen(int a, int b, int c) {  return ((a<20&&a>12)||(b<20&&b>12)||(c<20&&c>12));}public boolean loneTeen(int a, int b) {  return (a <= 19 && a >= 13) != (b <= 19 && b >= 13);}public String delDel(String str) {  if(str.length()<4)return str;  if(str.substring(1,4).equals("del"))  return str.charAt(0) + str.substring(4);  return str;}public boolean mixStart(String str) {  if(str.length() < 3)return false;  return str.charAt(1) == 'i' && str.charAt(2) == 'x';}public String startOz(String str) {  char o = str.length() > 0?str.charAt(0):' ', z = str.length() > 1?str.charAt(1):' ';  return (o == 'o'?"o":"") + (z == 'z'?"z":"");}public int intMax(int a, int b, int c) {  a=a>c?a:c;  return a>b?a:b;}public int close10(int a, int b) {  int a2 = Math.abs(a-10);  int b2 = Math.abs(b-10);  if(a2<b2)return a;if(b2<a2)return b;return 0;}public boolean in3050(int a, int b) {  return (a >= 30 && b >= 30 && a <= 40 && b <= 40)||(a >= 40 && b >= 40 && a <= 50 && b <= 50);}public int max1020(int a, int b) {  int c=a<10||a>20?0:a;  int d=b<10||b>20?0:b;  return c>d?c:d;}public boolean stringE(String str) {  int ct = 0;  for(int i = 0; i < str.length(); i++){if(str.charAt(i) == 'e')ct++;}  return ct>=1 && ct<=3;}public boolean lastDigit(int a, int b) {  return a%10==b%10;}public String endUp(String str) {  int a = str.length();  return a<3?str.toUpperCase():(str.substring(0,a-3) + str.substring(a-3).toUpperCase());}public String everyNth(String str, int n) {  String a = "";  for(int i=0;i<str.length();i+=n)    a+=str.charAt(i);  return a;}