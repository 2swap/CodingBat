public int factorial(int n) {  return n<2?1:n*factorial(n-1);}public int bunnyEars(int bunnies) {  return bunnies<1?0:bunnyEars(bunnies-1)+2;}public int fibonacci(int n) {  return n<2?n:fibonacci(n-1)+fibonacci(n-2);}public int bunnyEars2(int bunnies) {  return bunnies<1?0:bunnyEars2(bunnies-1)+3-bunnies%2;}public int triangle(int rows) {  return rows<1?0:rows+triangle(rows-1);}public int sumDigits(int n) {  return n<1?n:sumDigits(n/10)+n%10;}public int count7(int n) {  return n<1?0:count7(n/10)+(n%10==7?1:0);}public int count8(int n) {  return n==0?0:count8(n/10)+(n%100==88?2:n%10==8?1:0);}public int powerN(int base, int n) {  return n==0?1:base*powerN(base,n-1);}public int countX(String str) {  return str.equals("")?0:countX(str.substring(1))+(str.charAt(0) == 'x'?1:0);}public int countHi(String str) {  return str.length()<2?0:str.startsWith("hi")?1+countHi(str.substring(2)):countHi(str.substring(1));}public String changeXY(String str) {  int i=str.indexOf("x");  if(i==-1)return str;  return str.substring(0,i)+"y"+changeXY(str.substring(i+1));}public String changePi(String str) {  return str.length()<2?str:str.startsWith("pi")?"3.14"+changePi(str.substring(2)):str.charAt(0)+changePi(str.substring(1));}public String noX(String str) {  return str.length()<1?"":str.startsWith("x")?noX(str.substring(1)):str.charAt(0)+noX(str.substring(1));}public boolean array6(int[] nums, int index) {  return index==nums.length?false:nums[index]==6||array6(nums,index+1);}public int array11(int[] nums, int index) {  return nums.length==index?0:(nums[index]==11?1:0)+array11(nums,1+index);}public boolean array220(int[] nums, int index) {  return index<nums.length-1&&(nums[index]*10==nums[index+1]||array220(nums,index+1));}public String allStar(String str) {  return str.length()<2?str:str.charAt(0)+"*" + allStar(str.substring(1));}public String pairStar(String str) {  return str.length()<2?str:  (str.charAt(0)==str.charAt(1)?  str.charAt(0)+"*"+pairStar(str.substring(1)):  str.charAt(0)+pairStar(str.substring(1)));}public String endX(String str) {  if(str.length()<2)    return str;  return str.startsWith("x")?endX(str.substring(1))+"x":str.charAt(0)+endX(str.substring(1));}public int countPairs(String str) {  return str.length()<3?0:(str.charAt(0)==str.charAt(2)?1:0)+countPairs(str.substring(1));}public int countAbc(String str) {  return str.length()<3?0:(str.startsWith("abc")||str.startsWith("aba")?1:0)+countAbc(str.substring(1));}public int count11(String str) {  return str.length()<2?0:str.startsWith("11")?1+count11(str.substring(2)):count11(str.substring(1));}public String stringClean(String str) {  if(str.length()<2)return str;  String s = (str.charAt(0)==str.charAt(1)?"":str.charAt(0))+stringClean(str.substring(1));  return s;}public int countHi2(String str) {  return str.length()<2?0:  str.startsWith("xhi")?countHi2(str.substring(3)):  str.startsWith("hi")?1+countHi2(str.substring(2)):countHi2(str.substring(1));}public String parenBit(String str) {  return str.startsWith("(")?str.endsWith(")")?str:parenBit(str.substring(0,str.length()-1)):parenBit(str.endsWith(")")?str.substring(1):str.substring(1,str.length()-1));}public boolean nestParen(String str) {  return str.length()<1||str.startsWith("(")&&str.endsWith(")")&&nestParen(str.substring(1,str.length()-1));}public int strCount(String str, String sub) {  return str.length()<sub.length()?0:  str.startsWith(sub)?1+strCount(str.substring(sub.length()),sub):strCount(str.substring(1),sub);}public boolean strCopies(String str, String sub, int n) {  return str.length()<1?n<1:strCopies(str.substring(1),sub,str.startsWith(sub)?n-1:n);}public int strDist(String str, String sub) {  return str.startsWith(sub)?  (str.endsWith(sub)?str.length():strDist(str.substring(0,str.length()-1),sub)):  (str.endsWith(sub)?strDist(str.substring(1),sub):  (str.length()<3?0:strDist(str.substring(1,str.length()-1),sub)));}