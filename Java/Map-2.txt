public Map<String, Integer> word0(String[] strings) {  Map<String, Integer> m = new HashMap<String, Integer>();  for(String s:strings)    m.put(s,0);  return m;}public Map<String, Integer> wordLen(String[] strings) {  Map<String, Integer> m = new HashMap<String, Integer>();  for(String s:strings)    m.put(s,s.length());  return m;}public Map<String, String> pairs(String[] strings) {  Map<String, String> m = new HashMap<String, String>();  for(String s:strings)    m.put(s.charAt(0)+"",""+s.charAt(s.length()-1));  return m;}public Map<String, Integer> wordCount(String[] strings) {  Map<String, Integer> m = new HashMap<String, Integer>();  for(String s:strings)    m.put(s,m.containsKey(s)?m.get(s)+1:1);  return m;}public Map<String, String> firstChar(String[] strings) {  Map<String, String> m = new HashMap<String, String>();  for(String s:strings)    m.put(s.charAt(0)+"",m.containsKey(s.charAt(0)+"")?m.get(s.charAt(0)+"")+s:s);  return m;}public String wordAppend(String[] strings) {  String o="";  Map<String, Integer> m = new HashMap<String, Integer>();  for(String s:strings){    m.put(s,m.containsKey(s)?m.get(s)+1:1);    if(m.get(s)%2==0)      o+=s;  }  return o;}public Map<String, Boolean> wordMultiple(String[] strings) {  Map<String, Boolean> m = new HashMap<String, Boolean>();  for(String s:strings)    m.put(s,m.containsKey(s));  return m;}public String[] allSwap(String[] strings) {  Map<Character, Integer> m=new HashMap<Character, Integer>();  for(int i = 0; i < strings.length; i++){    char ch = strings[i].charAt(0);    int swap = m.containsKey(ch)?m.get(ch):-1;    if(swap<0)      m.put(ch,i);    else{      String temp = strings[i];      strings[i] = strings[swap];      strings[swap] = temp;      m.put(ch,-1);    }  }  return strings;}public String[] firstSwap(String[] strings) {  Map<Character, Integer> m=new HashMap<Character, Integer>();  for(int i = 0; i < strings.length; i++){    char ch = strings[i].charAt(0);    int swap = m.containsKey(ch)?m.get(ch):-1;    if(swap==-1)      m.put(ch,i);    else if (swap>=0){      String temp = strings[i];      strings[i] = strings[swap];      strings[swap] = temp;      m.put(ch,-2);    }  }  return strings;}