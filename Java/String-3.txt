public int countYZ(String str) {  return (str.toLowerCase()+" ").split("(y[^a-z]|z[^a-z])",-1).length-1;}public String withoutString(String base, String remove) {  return base.replaceAll("(?i)"+remove,"");}public boolean equalIsNot(String str) {  return str.replace("not","~").length()==str.replace("is","").length();}public boolean gHappy(String str) {  return !str.matches("(^|.*[^g])g([^g].*|$)");}public int countTriple(String str) {  int count = 0;  for(int i=0;i<str.length()-2;i++)    if(str.charAt(i)==str.charAt(i+1)&&str.charAt(i)==str.charAt(i+2))      count++;  return count;}public int sumDigits(String str) {  int o=0;  for(int i=0;i<str.length();i++)    if(Character.isDigit(str.charAt(i)))      o+=Integer.parseInt(str.charAt(i)+"");  return o;}public String sameEnds(String string) {  int i;  for(i=string.length()-1;i>=0;i--)    if(string.endsWith(string.substring(0,i)))      return string.substring(0,Math.min(i,string.length()/2));  return "";}public String mirrorEnds(String string) {  for(int i=string.length();i>0;i--)    if(string.endsWith(backwards(string.substring(0,i))))return string.substring(0,i);  return "";}public String backwards(String s){  String o="";  for(int i=s.length()-1;i>=0;i--)    o+=s.charAt(i);  return o;}public int maxBlock(String str) {  int c=1,b=0;  for(int i=0;i<str.length()-1;i++){    c=str.charAt(i)==str.charAt(i+1)?c+1:1;    b=b>c?b:c;  }  return b;}public int sumNumbers(String str) {  str=str.replaceAll("[^\\d]"," ");  java.util.Scanner s=new java.util.Scanner(str);  int o=0;  while(s.hasNextInt())    o+=s.nextInt();  return o;}public String notReplace(String str) {  for(int i=0;i<str.length()-1;i++)    if(str.substring(i,i+2).equals("is")&&(i==0||!Character.isLetter(str.charAt(i-1)))&&(i+2==str.length()||!Character.isLetter(str.charAt(i+2))))      str = str.substring(0,i)+"is not"+str.substring(i+2);  return str;}