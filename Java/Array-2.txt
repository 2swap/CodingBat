public int countEvens(int[] nums) {  int count = 0;  for(int i: nums){    if(i%2==0)    count++;      }return count;}public int bigDiff(int[] nums) {  int b=-1000000,s=1000000;  for(int i:nums){    b=i>b?i:b;    s=i<s?i:s;  }  return b-s;}public int centeredAverage(int[] nums) {  int b=nums[0],s=nums[0],o=0;  for(int i:nums){    b=i>b?i:b;    s=i<s?i:s;    o+=i;  }  return (o-b-s)/(nums.length-2);}public int sum13(int[] nums) {  int sum=0;  for(int i=0;i<nums.length;i++){    if(nums[i]==13)i++;    else sum+=nums[i];  }  return sum;}public int sum67(int[] nums) {  int s=0;  boolean rec=true;  for(int i:nums){    s+=(rec&=i!=6)?i:0;    rec|=i==7;  }  return s;}public boolean has22(int[] nums) {  for(int i=1;i<nums.length;i++)    if(nums[i]==2&&nums[i-1]==2)return true;  return false;}public boolean lucky13(int[] nums) {  boolean no1=true, no3=true;  for(int i:nums){    no1&=i!=1;    no3&=i!=3;  }  return no1&&no3;}public boolean sum28(int[] nums) {  int c=0;  for(int i:nums)    c+=i==2?2:0;  return c==8;}public boolean more14(int[] nums) {  int s=0;  for(int i:nums)    s+=i==4?1:i==1?-1:0;  return s<0;}public int[] fizzArray(int n) {  int[]nums=new int[n];  for(int i=0;i<n;i++)nums[i]=i;  return nums;}public boolean only14(int[] nums) {  for(int i:nums)    if(i!=1&&i!=4)return false;  return true;}public String[] fizzArray2(int n) {  String[]r=new String[n];  for(int i=0;i<n;i++)r[i]=""+i;  return r;}public boolean no14(int[] nums) {  boolean no1=true,no4=true;  for(int i: nums){    no1&=i!=1;    no4&=i!=4;  }  return no1||no4;}public boolean isEverywhere(int[] nums, int val) {  for(int i=1;i<nums.length;i++)    if(nums[i]!=val&&nums[i-1]!=val)return false;  return true;}public boolean either24(int[] nums) {  boolean t=false,f=false;  for(int i=1;i<nums.length;i++){    t|=nums[i]==2&&nums[i-1]==2;    f|=nums[i]==4&&nums[i-1]==4;  }  return t^f;}public int matchUp(int[] nums1, int[] nums2) {  int count=0;  for(int i=0;i<nums1.length;i++)    if(Math.abs(nums2[i]-nums1[i])<=2&&nums2[i]!=nums1[i])count++;  return count;}public boolean has77(int[] nums) {  for(int i=2;i<nums.length;i++)    if((nums[i]==7||nums[i-1]==7)&&nums[i-2]==7||nums[i]==7&&nums[i-1]==7)return true;  return false;}public boolean has12(int[] nums) {  boolean r=false;  for(int i:nums){    if(r&&i==2)return true;    r|=i==1;  }  return false;}public boolean modThree(int[] nums) {  for(int i=2;i<nums.length;i++)    if((nums[i]%2+nums[i-1]%2+nums[i-2]%2)%3==0)return true;  return false;}public boolean haveThree(int[] nums) {  int ct=0;  for(int i=0;i<nums.length;i++)    if(nums[i]==3){      ct++;      if(i!=0&&nums[i-1]==3)return false;    }  return ct==3;}public boolean twoTwo(int[] nums) {  for(int i=0;i<nums.length;i++)    if(nums[i]==2&&!(i>0&&nums[i-1]==2||i<nums.length-1&&nums[i+1]==2))return false;  return true;}public boolean sameEnds(int[] nums, int len) {  for(int i=0;i<len;i++)    if(nums[i]!=nums[nums.length-len+i])return false;  return true;}public boolean tripleUp(int[] nums) {  for(int i=2;i<nums.length;i++)    if(nums[i]==nums[i-1]+1&&nums[i]==nums[i-2]+2)return true;  return false;}public int[] fizzArray3(int start, int end) {  int[]o=new int[end-start];  for(int i=start;i<end;i++)    o[i-start]=i;  return o;}public int[] shiftLeft(int[] nums) {  int[]ret=new int[nums.length];  for(int i=0;i<nums.length;i++)ret[i]=nums[(i+1)%nums.length];  return ret;}public int[] tenRun(int[] nums) {  int t=1;  int[]o=new int[nums.length];  for(int i=0;i<nums.length;i++){    if(i>0&&nums[i-1]%10==0)t=nums[i-1];    o[i]=(t%10==0)?nums[i]%10==0?nums[i]:t:nums[i];  }  return o;}public int[] pre4(int[] nums) {  ArrayList<Integer>list=new ArrayList<>();  for(int i:nums){    if(i%4==0)break;    list.add(i);}  nums=new int[list.size()];  for(int i=0;i<list.size();i++)    nums[i]=list.get(i);  return nums;}public int[] post4(int[] nums) {  int[] ret = new int[0];  int rec =0;  for(int i = nums.length-1; i>=0; i--)    if(nums[i]==4){ret = new int[nums.length-i-1];rec = i+1;break;}  for(int i = 0;i<ret.length; i++)  ret[i]=nums[i+rec];  return ret;}public int[] notAlone(int[] nums, int val) {  for(int i = 0; i < nums.length; i++)    if(nums[i] == val && i!=0 && i!=nums.length-1)      if(nums[i-1] != val && nums[i+1] != val)        nums[i] = Math.max(nums[i-1],nums[i+1]);        return nums;}public int[] zeroFront(int[] nums) {  int c=0,n=0;  int[]o=new int[nums.length];  for(int i:nums)    if(i==0)c++;    else n=i;  for(int i=0;i<nums.length;i++)    o[i]=i<c?0:n;  return o;}public int[] withoutTen(int[] nums) {  int c=0;  for(int i=0;i<nums.length;i++)    if(nums[i]!=10)nums[c++]=nums[i];  for(c=c;c<nums.length;c++)    nums[c]=0;  return nums;}public int[] zeroMax(int[] nums) {  int b=0;  for(int i = nums.length - 1; i >= 0; i--)    if(nums[i]%2==1) b= Math.max(nums[i],b);    else if(nums[i]==0) nums[i]=b;  return nums;}public int[] evenOdd(int[] nums) {  int e=0,o=0,c=0;  for(int i:nums)    if(i%2==0){e=i;c++;}    else o=i;  for(int i=0;i<nums.length;i++)    nums[i]=i<c?e:o;  return nums;}public String[] fizzBuzz(int start, int end) {  String[]o=new String[end-start];  for(int i = start; i < end; i++)    o[i-start]=i%3==0?i%5==0?"FizzBuzz":"Fizz":i%5==0?"Buzz":""+i;  return o;}